### This code is property of the GGAO ###


# Native imports
import re, copy, os

# Installed imports
import pytest
from unittest.mock import MagicMock, patch, mock_open
from unittest import mock
from pydantic import ValidationError

# Local imports
from io_parsing import MultimodalObject, Template, PersistenceElement, QueryMetadata, LLMMetadata, ResponseObject, adapt_input_queue, QueueMetadata, ProjectConf
from generatives import ChatGPTVision

gpt_v_model = {
    "model": "techhubinc-GermanyWestCentral-gpt-4o-2024-05-13",
    "model_type": "gpt-4o",
    "max_input_tokens": 128000,
    "zone": "techhubinc-GermanyWestCentral",
    "api_version": "2024-02-15-preview",
    "models_credentials": {}
}

bedrock_call = {
    "query_metadata": {
        "query": "what is a seed?",
        "template_name": "system_query_and_context_plus",
        "context": "The seed is an optional parameter, which can be set to an integer or null.This feature is in Preview. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism isn't guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.system_fingerprint is a string and is part of the chat completion object.This fingerprint represents the backend configuration that the model runs with.It can be used with the seed request parameter to understand when backend changes have been made that might affect determinism.To view the full chat completion object with system_fingerprint, you could add print(response.model_dump_json(indent=2)) to the previous Python code next to the existing print statement, or $response | convertto-json -depth 5 at the end of the PowerShell example. This change results in the following additional information being part of the output:By using the same seed parameter of 42 for each of our three requests, while keeping all other parameters the same, we're able to produce much more consistent results.ImportantDeterminism is not guaranteed with reproducible output. Even in cases where the seed parameter and system_fingerprint are the same across API calls it is currently not uncommon to still observe a degree of variability in responses. Identical API calls with larger max_tokens values, will generally result in less deterministic responses even when the seed parameter is set. By default if you ask an Azure OpenAI Chat Completion model the same question multiple times you're likely to get a different response. The responses are therefore considered to be non-deterministic. Reproducible output is a new preview feature that allows you to selectively change the default behavior to help product more deterministic outputs.",
        "lang": "en"
    },
    "llm_metadata": {
        "max_input_tokens": 1000,
        "model": "claude-v2:1-NorthVirginiaEast"
    },
    "platform_metadata": {
        "platform": "bedrock"
    }
}

base64 = "


vision_persistence = [
    [
        {"role": "user", "content": [
                {
                    "type": "text",
                    "text": "Tell me something about the image",
                    "n_tokens": 343
                },{
                    "type": "image_url",
                    "image": {
                        "url": "https://www.cabq.gov/artsculture/biopark/news/10-cool-facts-about-penguins/@@images/1a36b305-412d-405e-a38b-0947ce6709ba.jpeg"
                    },
                    "n_tokens": 33
                },{
                    "type": "text",
                    "text": "And this?",
                    "n_tokens": 4
                },{
                    "type": "image_b64",
                    "image": {
                        "base64": base64
                    },
                    "n_tokens": 567
                }
            ]
        },
        {"role": "assistant", "content": "In the image we have a penguin", "n_tokens": 34}
    ]
]

azure_call = {
    "query_metadata": {
        "query": "what is a seed?",
        "template_name": "system_query_and_context_plus",
        "context": "The seed is an optional parameter, which can be set to an integer or null.This feature is in Preview. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism isn't guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.system_fingerprint is a string and is part of the chat completion object.This fingerprint represents the backend configuration that the model runs with.It can be used with the seed request parameter to understand when backend changes have been made that might affect determinism.To view the full chat completion object with system_fingerprint, you could add print(response.model_dump_json(indent=2)) to the previous Python code next to the existing print statement, or $response | convertto-json -depth 5 at the end of the PowerShell example. This change results in the following additional information being part of the output:By using the same seed parameter of 42 for each of our three requests, while keeping all other parameters the same, we're able to produce much more consistent results.ImportantDeterminism is not guaranteed with reproducible output. Even in cases where the seed parameter and system_fingerprint are the same across API calls it is currently not uncommon to still observe a degree of variability in responses. Identical API calls with larger max_tokens values, will generally result in less deterministic responses even when the seed parameter is set. By default if you ask an Azure OpenAI Chat Completion model the same question multiple times you're likely to get a different response. The responses are therefore considered to be non-deterministic. Reproducible output is a new preview feature that allows you to selectively change the default behavior to help product more deterministic outputs.",
        "lang": "en",
        "persistence": vision_persistence
    },
    "llm_metadata": {
        "max_input_tokens": 1000,
        "model": "techhubinc-GermanyWestCentral-gpt-4o-2024-05-13"
    },
    "platform_metadata": {
        "platform": "azure"
    }
}

dalle_call = {
    "query_metadata": {
        "query": "A house with a red roof and a blue door",
    },
    "llm_metadata": {
        "model": "techhubinc-AustraliaEast-dall-e-3",
        "max_input_tokens": 3999
    },
    "platform_metadata": {
        "platform": "azure",
        "timeout": 30
    }
}

vision_query_template_call = {
    "query_metadata": {
        "query": [
            {
                "type": "text",
                "text": "Buenas tardes, le mando una foto"
            }, {
                "type": "image_url",
                "image": {
                    "url": "https://www.cabq.gov/artsculture/biopark/news/10-cool-facts-about-penguins/@@images/1a36b305-412d-405e-a38b-0947ce6709ba.jpeg"
                },
            }
        ],
        "template_name": "test_system_query_v"
    },
    "llm_metadata": {
        "model": "techhubinc-pool-us-gpt-4v"
    },
    "platform_metadata": {
        "platform": "azure"
    }
}

class TestResponseObject():
    def test_validate_status(self):
        data_response = MagicMock(data={"status_code": 200})
        with pytest.raises(ValueError, match="If status is 'error', status_code must be different from 200"):
            ResponseObject.validate_status("error", data_response)

        data_response = MagicMock(data={"status_code": 400})
        with pytest.raises(ValueError, match="If status is 'finished', status_code must be 200"):
            ResponseObject.validate_status("finished", data_response)

    def test_get_response(self):
        with pytest.raises(ValueError, match="Internal error, response object must have a result or an error_message"):
            ResponseObject(**{"status_code": 200, "status": "finished"}).get_response_base()

        response_object = ResponseObject(**{"status_code": 200, "status": "finished", "result": "result"})
        os.environ['Q_GENAI_LLMQUEUE_OUTPUT'] = "techhubragemeal--q-local-output" 
        with mock.patch("io_parsing.QUEUE_MODE", True):
            mock_object = MagicMock(output_file="output.json")
            mock_object.upload_json_output.return_value = None
            must_continue, output, next_service = response_object.get_response_predict(mock_object)
            assert must_continue
            assert output.get('result') == 'output.json'
            assert next_service == "techhubragemeal--q-local-output"

class TestLLMMetadata():
    def test_validate_funtions_and_functions_call(self):
        with pytest.raises(ValidationError, match=re.escape("1 validation error for LLMMetadata\n  Value error, Internal error, function_call is mandatory because you put the functions param [type=value_error, input_value={'functions': ['function1'], 'model': 'ddd'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error")):
            LLMMetadata(functions=["function1"], model="ddd")
        with pytest.raises(ValidationError, match=re.escape("1 validation error for LLMMetadata\n  Value error, Internal error, functions is mandatory because you put the function_call param [type=value_error, input_value={'function_call': 'function1', 'model': 'ddd'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error")):
            LLMMetadata(function_call="function1", model="ddd")

    def test_validate_default_model(self):
        metadata = LLMMetadata(default_model="techhubdev-pool-world-gpt-4o")
        assert metadata.model == "techhubdev-pool-world-gpt-4o"

        metadata = LLMMetadata(model="techhubdev-pool-world-gpt-3.5-turbo-16k")
        assert metadata.model == "techhubdev-pool-world-gpt-3.5-turbo-16k"

        with pytest.raises(ValidationError, match=r"1 validation error for LLMMetadata\n  Value error, Internal error, default model not founded \[type=value_error, input_value=\{\}, input_type=dict\]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"):
            LLMMetadata()

class TestQueryMetadata():
    def test_validate_query(self):
        data_query = MagicMock(data={"is_vision_model": False})
        with pytest.raises(ValueError, match="query must be a string for non vision models"):
            QueryMetadata.validate_query(["query"], data_query)

        data_query = MagicMock(data={"is_vision_model": True})
        with pytest.raises(ValueError, match="Elements of the query must be dict {}"):
            QueryMetadata.validate_query(["query"], data_query)

    def test_validate_persistence(self):
        data_persistence = MagicMock(data={"is_vision_model": False})
        with pytest.raises(ValueError, match="Persistence must be a list containing lists"):
            QueryMetadata.validate_persistence(["query"], data_persistence)

        with pytest.raises(ValueError, match=re.escape("Content must contain pairs of ['user', 'assistant']")):
            QueryMetadata.validate_persistence([["query"]], data_persistence)

        persistence = [[
                {"role": "assistant", "content": "Is it true that he won the superbowl?"},
                {"role": "user", "content": "In 2019 Alejandro Betato won the superbowl"}
        ]]
        with pytest.raises(ValueError, match=re.escape("In persistence, first role must be 'user' and second role must be 'assistant'")):
            QueryMetadata.validate_persistence(persistence, data_persistence)

    def test_validate_template(self):
        data_template = MagicMock(data={"is_vision_model": True, "query": "query"})
        template = {"system": "$system", "user": ["$query"]}
        with pytest.raises(ValueError, match=re.escape(f"In the template '{template}' query does not match model query structure. In vision models must be a list")):
            QueryMetadata.validate_template(template, data_template)

        data_template = MagicMock(data={"is_vision_model": False, "query": "query"})
        template = {"system": "$system", "user": ["$query"]}
        with pytest.raises(ValueError, match=re.escape(f"In the template '{template}' query does not match model query structure. In non vision models must be a string")):
            QueryMetadata.validate_template(template, data_template)

    def test_max_characters_dalle(self):
        template = {"system": "$system", "user": "$query"}
        with pytest.raises(ValueError, match=re.escape("1 validation error for QueryMetadata\n  Value error, Error, in dalle3 the maximum number of characters in the prompt is 4000 (query + persistence is longer) [type=value_error, input_value={'is_vision_model': False...e_name': 'system_query'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error")):
            QueryMetadata(is_vision_model=False, model_type="dalle3", query=base64, template=template, template_name="system_query")

class TestQueueMetadata():
    def test_init(self):
        queue_metadata = QueueMetadata(input_file="input.json", output_file="output.json", location_type="cloud")
        assert queue_metadata.input_file == "input.json"
        assert queue_metadata.output_file == "output.json"
        assert queue_metadata.location_type == "cloud"
    
    def test_init_wrong(self):
        with pytest.raises(ValueError):
            QueueMetadata(input_file="input.json", output_file="output", location_type="cloud")
        
        with pytest.raises(ValueError):
            QueueMetadata(input_file="input", output_file="output.json", location_type="cloud")
    
    def test_load_json_input_wrong(self):
        queue_metadata = QueueMetadata(input_file="input.json", output_file="output.json", location_type="cloud")
        with patch("common.genai_controllers.load_file", return_value='asedf'):
            with pytest.raises(ValueError):
                queue_metadata.load_json_input()
        queue_metadata = QueueMetadata(input_file="input.json", output_file="output.json", location_type="local")
        with patch('builtins.open', mock_open(read_data='asdf')):
            with pytest.raises(ValueError):
                queue_metadata.load_json_input()

    def test_upload_json_output_wrong(self):
        queue_metadata = QueueMetadata(input_file="input.json", output_file="output.json", location_type="cloud")
        with pytest.raises(ValueError):
            queue_metadata.upload_json_output(MagicMock())
        queue_metadata = QueueMetadata(input_file="input.json", output_file="output.json", location_type="local")
        with pytest.raises(ValueError):
            queue_metadata.upload_json_output(MagicMock())



class TestPersistenceElement():
    def test_validate_content(self):
        data_element = MagicMock(data={"is_vision_model": True, "role": "assistant"})
        with pytest.raises(ValueError, match=re.escape("'assistant' role must have string format for 'content'")):
            PersistenceElement.validate_content(["content"], data_element)

        data_element = MagicMock(data={"is_vision_model": False, "role": "user"})
        with pytest.raises(ValueError, match=re.escape("persistence content must be a string for non vision models")):
            PersistenceElement.validate_content(["content"], data_element)

        data_element = MagicMock(data={"is_vision_model": True, "role": "user"})
        with pytest.raises(ValueError, match=re.escape("Elements of the content must be dict {} for vision models")):
            PersistenceElement.validate_content(["content"], data_element)

class TestTemplate():
    def test_validate_user(self):
        with pytest.raises(ValueError, match=re.escape("User must be a string or a list of strings")):

            Template.validate_user({})

class TestMultimodalObject():
    def test_validate_image(self):
        data_image = MagicMock(data={"type": "image"})
        with pytest.raises(ValueError, match=re.escape("'image' must be for 'image_url' or 'image_b64' types")):
            MultimodalObject.validate_image({}, data_image)

        data_image = MagicMock(data={"type": "image_url"})
        with pytest.raises(ValueError, match=re.escape("'text' parameter must be for 'text' type")):
            MultimodalObject.validate_text("", data_image)

class TestProjectConf():
    def test_x_limits_empty(self):
        with patch("requests.get") as patch_requests:
            patch_requests.return_value = MagicMock(text='{"limits": [{\"limit\": 23, \"resource": \"aa\", \"current\": 0}]}', status_code=200,)
            model = ChatGPTVision(**gpt_v_model)
            project_conf = ProjectConf(**{"x-tenant": "test", "x-department": "test", "x-reporting": "test", "x-limits": {}, "model": model, "platform": "azure"})


@patch("io_parsing.QUEUE_MODE", True)
def test_adapt_input_queue():
    json_input = copy.deepcopy(azure_call)
    json_input['headers'] = {'Content-Type': 'application/json',"x-tenant": "test", "x-department": "test", "x-reporting": "test", "x-limits": "{}"}
    json_input['query_metadata']["C:\\users"] = "C:\\users\\lkl"

    os.environ["DATA_MOUNT_PATH"] = ""
    os.environ["DATA_MOUNT_KEY"] = ""
    result, _ = adapt_input_queue(json_input)
    assert result['query_metadata']["C:\\users"] == "C:\\users\\lkl"

    os.environ["DATA_MOUNT_PATH"] = "C:"
    os.environ["DATA_MOUNT_KEY"] = "C:\\users"

    # Path does not exist
    with patch('os.path.exists') as mock_exists:
        mock_exists.return_value = False
        result, _ = adapt_input_queue(json_input)
        assert result['query_metadata']["C:\\users"] == "C:\\users\\lkl"

    # File does not exist
    with (patch('os.path.exists') as mock_exists, patch('os.path.isfile') as mock_isfile):
        mock_exists.return_value = True
        mock_isfile.return_value = False
        result, _ = adapt_input_queue(json_input)
        assert result['query_metadata']["C:\\users"] == "C:\\users\\lkl"

    # Error reading file
    with (patch('os.path.exists') as mock_exists, patch('os.path.isfile') as mock_isfile,
          patch('builtins.open', mock_open(read_data="key")) as mock_func_open):
        mock_exists.return_value = True
        mock_isfile.return_value = True
        mock_func_open.side_effect = Exception("Error reading file")

        result, _ = adapt_input_queue(json_input)
        assert result['query_metadata']["C:\\users"] == "C:\\users\\lkl"

    # Working propertly
    with (patch('os.path.exists') as mock_exists, patch('os.path.isfile') as mock_isfile,
          patch('builtins.open', mock_open(read_data="key"))):
        mock_exists.return_value = True
        mock_isfile.return_value = True
        result, _  = adapt_input_queue(json_input)
        assert result['query_metadata']["C:\\users"] == "key"